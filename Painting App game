import kivy
from kivy.app import App
from kivy.uix.widget import Widget
from kivy.graphics import Line, Color
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button

kivy.require('2.0.0')

class PaintWidget(Widget):
    def __init__(self, **kwargs):
        super(PaintWidget, self).__init__(**kwargs)
        self.current_color = (1, 0, 0)  # Default color: red

    def on_touch_down(self, touch):
        with self.canvas:
            Color(*self.current_color)
            touch.ud['line'] = Line(points=(touch.x, touch.y), width=2)

    def on_touch_move(self, touch):
        touch.ud['line'].points += [touch.x, touch.y]

    def clear_canvas(self, instance):
        self.canvas.clear()

    def set_color(self, instance, color):
        self.current_color = color

class PaintApp(App):
    def build(self):
        parent = Widget()
        self.painter = PaintWidget()

        layout = BoxLayout(orientation='vertical')

        button_layout = BoxLayout(size_hint=(3, 3))

        clear_button = Button(text='Clear')
        clear_button.bind(on_release=self.painter.clear_canvas)
        button_layout.add_widget(clear_button)

        colors = {
            'Red': (1, 0, 0),
            'Green': (0, 1, 0),
            'Blue': (0, 0, 1),
            'white': (1, 1, 1),
        }

        for color_name, color_value in colors.items():
            color_button = Button(text=color_name)
            color_button.bind(on_release=lambda btn, col=color_value: self.painter.set_color(btn, col))
            button_layout.add_widget(color_button)

        layout.add_widget(button_layout)
        layout.add_widget(self.painter)

        parent.add_widget(layout)

        return parent

if __name__ == '__main__':
    PaintApp().run()
